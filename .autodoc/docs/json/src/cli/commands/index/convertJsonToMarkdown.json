{
  "fileName": "convertJsonToMarkdown.ts",
  "filePath": "src/cli/commands/index/convertJsonToMarkdown.ts",
  "url": "https://github.com/context-labs/autodoc/src/cli/commands/index/convertJsonToMarkdown.ts",
  "summary": "The `convertJsonToMarkdown` function in this code is responsible for converting JSON files containing documentation information into Markdown files. This is done in two main steps: counting the number of files in the project and creating Markdown files for each code file in the project.\n\nFirst, the function uses the `traverseFileSystem` utility to count the number of files in the project. It takes an `AutodocRepoConfig` object as input, which contains information about the project, such as its name, root directory, output directory, and other configuration options. The `traverseFileSystem` utility is called with a `processFile` function that increments the `files` counter for each file encountered.\n\n```javascript\nawait traverseFileSystem({\n  inputPath: inputRoot,\n  projectName,\n  processFile: () => {\n    files++;\n    return Promise.resolve();\n  },\n  ignore: [],\n  filePrompt,\n  folderPrompt,\n  contentType,\n  targetAudience,\n  linkHosted,\n});\n```\n\nNext, the function defines another `processFile` function that reads the content of each JSON file, converts it to a Markdown format, and writes the output to a new Markdown file in the specified output directory. It first checks if the content exists, and if not, it returns early. It then creates the output directory if it doesn't exist, and parses the JSON content into either a `FolderSummary` or a `FileSummary` object, depending on the file name.\n\nThe function then constructs the Markdown content by including a link to the code on GitHub, the summary, and any questions if they exist. Finally, it writes the Markdown content to the output file with the `.md` extension.\n\n```javascript\nconst outputPath = getFileName(markdownFilePath, '.', '.md');\nawait fs.writeFile(outputPath, markdown, 'utf-8');\n```\n\nThe `convertJsonToMarkdown` function is then called again with the new `processFile` function to create the Markdown files for each code file in the project.\n\n```javascript\nawait traverseFileSystem({\n  inputPath: inputRoot,\n  projectName,\n  processFile,\n  ignore: [],\n  filePrompt,\n  folderPrompt,\n  contentType,\n  targetAudience,\n  linkHosted,\n});\n```\n\nIn summary, this code is responsible for converting JSON files containing documentation information into Markdown files, which can be used in the larger Autodoc project to generate documentation for code repositories.",
  "questions": "1. **What is the purpose of the `convertJsonToMarkdown` function?**\n\n   The `convertJsonToMarkdown` function is responsible for converting JSON files containing summaries and questions about code files in a project into Markdown files. It traverses the file system, reads the JSON files, and creates corresponding Markdown files with the provided information.\n\n2. **How does the `traverseFileSystem` function work and what are its parameters?**\n\n   The `traverseFileSystem` function is a utility function that recursively traverses the file system starting from a given input path. It takes an object as a parameter with properties such as `inputPath`, `projectName`, `processFile`, `ignore`, `filePrompt`, `folderPrompt`, `contentType`, `targetAudience`, and `linkHosted`. The function processes each file using the provided `processFile` callback and can be configured to ignore certain files or folders.\n\n3. **What is the purpose of the `processFile` function inside `convertJsonToMarkdown`?**\n\n   The `processFile` function is a callback function that is passed to the `traverseFileSystem` function. It is responsible for reading the content of a JSON file, parsing it, and creating a corresponding Markdown file with the summary and questions. It also handles creating the output directory if it doesn't exist and writing the Markdown content to the output file."
}